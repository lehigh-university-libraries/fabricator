//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240628202753-01d615601570 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// IslandoraObject defines model for IslandoraObject.
type IslandoraObject struct {
	// Changed Change timestamp
	Changed *string `csv:"-" json:"changed,omitempty"`

	// Created Creation timestamp
	Created *string `csv:"-" json:"created,omitempty"`

	// FieldAbstract Abstract
	FieldAbstract *string `csv:"field_abstract" json:"field_abstract,omitempty"`

	// FieldAccess Access field
	FieldAccess *string `csv:"field_access" json:"field_access,omitempty"`

	// FieldAffiliatedInstitution Affiliated institution
	FieldAffiliatedInstitution *int `csv:"field_affiliated_institution" json:"field_affiliated_institution,omitempty"`

	// FieldAltTitle Alternate title
	FieldAltTitle *string `csv:"field_alt_title" json:"field_alt_title,omitempty"`

	// FieldClassification Classification
	FieldClassification *string `csv:"field_classification" json:"field_classification,omitempty"`

	// FieldCollectionHierarchy Collection hierarchy
	FieldCollectionHierarchy *int `csv:"field_collection_hierarchy" json:"field_collection_hierarchy,omitempty"`

	// FieldCoordinates Coordinates
	FieldCoordinates *string `csv:"field_coordinates" json:"field_coordinates,omitempty"`

	// FieldCoordinatesText Coordinates text
	FieldCoordinatesText *string `csv:"field_coordinates_text" json:"field_coordinates_text,omitempty"`

	// FieldCopyrightDate Copyright date
	FieldCopyrightDate *string `csv:"field_copyright_date" json:"field_copyright_date,omitempty"`

	// FieldCreatorDescription Creator description
	FieldCreatorDescription *string `csv:"field_creator_description" json:"field_creator_description,omitempty"`

	// FieldCreatorEmail Creator email
	FieldCreatorEmail *openapi_types.Email `csv:"field_creator_email" json:"field_creator_email,omitempty"`

	// FieldCreatorRole Creator role
	FieldCreatorRole *int `csv:"field_creator_role" json:"field_creator_role,omitempty"`

	// FieldDateModified Date modified
	FieldDateModified *string `csv:"field_date_modified" json:"field_date_modified,omitempty"`

	// FieldDateOther Other date
	FieldDateOther *string `csv:"field_date_other" json:"field_date_other,omitempty"`

	// FieldDateSeason Date season
	FieldDateSeason *int `csv:"field_date_season" json:"field_date_season,omitempty"`

	// FieldDateValid Date valid
	FieldDateValid *string `csv:"field_date_valid" json:"field_date_valid,omitempty"`

	// FieldDegreeLevel Degree level
	FieldDegreeLevel *int `csv:"field_degree_level" json:"field_degree_level,omitempty"`

	// FieldDegreeName Degree name
	FieldDegreeName *int `csv:"field_degree_name" json:"field_degree_name,omitempty"`

	// FieldDepartmentName Department name
	FieldDepartmentName *int `csv:"field_department_name" json:"field_department_name,omitempty"`

	// FieldDescription Description
	FieldDescription *string `csv:"field_description" json:"field_description,omitempty"`

	// FieldDigitalFormat Digital format
	FieldDigitalFormat *int `csv:"field_digital_format" json:"field_digital_format,omitempty"`

	// FieldDigitalOrigin Digital origin
	FieldDigitalOrigin *int `csv:"field_digital_origin" json:"field_digital_origin,omitempty"`

	// FieldDisplayHints Display hints
	FieldDisplayHints *int `csv:"field_display_hints" json:"field_display_hints,omitempty"`

	// FieldEdition Edition
	FieldEdition *string `csv:"field_edition" json:"field_edition,omitempty"`

	// FieldEdtfDate EDTF date
	FieldEdtfDate *string `csv:"field_edtf_date" json:"field_edtf_date,omitempty"`

	// FieldEdtfDateCaptured EDTF date captured
	FieldEdtfDateCaptured *string `csv:"field_edtf_date_captured" json:"field_edtf_date_captured,omitempty"`

	// FieldEdtfDateCreated EDTF date created
	FieldEdtfDateCreated *string `csv:"field_edtf_date_created" json:"field_edtf_date_created,omitempty"`

	// FieldEdtfDateEmbargo EDTF date embargo
	FieldEdtfDateEmbargo *string `csv:"field_edtf_date_embargo" json:"field_edtf_date_embargo,omitempty"`

	// FieldEdtfDateIssued EDTF date issued
	FieldEdtfDateIssued *string `csv:"field_edtf_date_issued" json:"field_edtf_date_issued,omitempty"`

	// FieldExtent Extent
	FieldExtent *string `csv:"field_extent" json:"field_extent,omitempty"`

	// FieldFrequency Frequency
	FieldFrequency *int `csv:"field_frequency" json:"field_frequency,omitempty"`

	// FieldFullTitle Full title
	FieldFullTitle *string `csv:"field_full_title" json:"field_full_title,omitempty"`

	// FieldGenre Genre
	FieldGenre *int `csv:"field_genre" json:"field_genre,omitempty"`

	// FieldGeographicSubject Geographic subject
	FieldGeographicSubject *int `csv:"field_geographic_subject" json:"field_geographic_subject,omitempty"`

	// FieldHideGscholarMetatags Hide Google Scholar metatags
	FieldHideGscholarMetatags *bool `csv:"field_hide_gscholar_metatags" json:"field_hide_gscholar_metatags,omitempty"`

	// FieldHideHocr Hide HOCR
	FieldHideHocr *bool `csv:"field_hide_hocr" json:"field_hide_hocr,omitempty"`

	// FieldIdentifier Identifier
	FieldIdentifier *string `csv:"field_identifier" json:"field_identifier,omitempty"`

	// FieldKeywords Keywords
	FieldKeywords *int `csv:"field_keywords" json:"field_keywords,omitempty"`

	// FieldLanguage Language
	FieldLanguage *int `csv:"field_language" json:"field_language,omitempty"`

	// FieldLccClassification LCC classification
	FieldLccClassification *string `csv:"field_lcc_classification" json:"field_lcc_classification,omitempty"`

	// FieldLcshTopic LCSH topic
	FieldLcshTopic *int `csv:"field_lcsh_topic" json:"field_lcsh_topic,omitempty"`

	// FieldLinkedAgent Linked agent
	FieldLinkedAgent *string `csv:"field_linked_agent" json:"field_linked_agent,omitempty"`

	// FieldLocalRestriction Local restriction
	FieldLocalRestriction *bool `csv:"field_local_restriction" json:"field_local_restriction,omitempty"`

	// FieldMediaType Media type
	FieldMediaType *int `csv:"field_media_type" json:"field_media_type,omitempty"`

	// FieldMemberOf Member of
	FieldMemberOf *int `csv:"field_member_of" json:"field_member_of,omitempty"`

	// FieldModeOfIssuance Mode of issuance
	FieldModeOfIssuance *int `csv:"field_mode_of_issuance" json:"field_mode_of_issuance,omitempty"`

	// FieldModel Model
	FieldModel int `csv:"field_model" json:"field_model"`

	// FieldNote Note
	FieldNote *string `csv:"field_note" json:"field_note,omitempty"`

	// FieldOriginalTitle Original title
	FieldOriginalTitle *string `csv:"field_original_title" json:"field_original_title,omitempty"`

	// FieldPartDetail Part detail
	FieldPartDetail *string `csv:"field_part_detail" json:"field_part_detail,omitempty"`

	// FieldPhysicalDescription Physical description
	FieldPhysicalDescription *string `csv:"field_physical_description" json:"field_physical_description,omitempty"`

	// FieldPhysicalForm Physical form
	FieldPhysicalForm *int `csv:"field_physical_form" json:"field_physical_form,omitempty"`

	// FieldPhysicalLocation Physical location
	FieldPhysicalLocation *int `csv:"field_physical_location" json:"field_physical_location,omitempty"`

	// FieldPid PID
	FieldPid *string `csv:"field_pid" json:"field_pid,omitempty"`

	// FieldPlacePublished Place published
	FieldPlacePublished *string `csv:"field_place_published" json:"field_place_published,omitempty"`

	// FieldPlacePublishedCountry Place published country
	FieldPlacePublishedCountry *int `csv:"field_place_published_country" json:"field_place_published_country,omitempty"`

	// FieldPublisher Publisher
	FieldPublisher *string `csv:"field_publisher" json:"field_publisher,omitempty"`

	// FieldRecordOrigin Record origin
	FieldRecordOrigin *string `csv:"field_record_origin" json:"field_record_origin,omitempty"`

	// FieldRelatedItem Related item
	FieldRelatedItem *string `csv:"field_related_item" json:"field_related_item,omitempty"`

	// FieldRelation Relation
	FieldRelation *string `csv:"field_relation" json:"field_relation,omitempty"`

	// FieldResourceType Resource type
	FieldResourceType *int `csv:"field_resource_type" json:"field_resource_type,omitempty"`

	// FieldRights Rights
	FieldRights *string `csv:"field_rights" json:"field_rights,omitempty"`

	// FieldSiteDisposition Site disposition
	FieldSiteDisposition *int `csv:"field_site_disposition" json:"field_site_disposition,omitempty"`

	// FieldSortBy Sort by
	FieldSortBy *string `csv:"field_sort_by" json:"field_sort_by,omitempty"`

	// FieldSource Source
	FieldSource *string `csv:"field_source" json:"field_source,omitempty"`

	// FieldSubject Subject
	FieldSubject *int `csv:"field_subject" json:"field_subject,omitempty"`

	// FieldSubjectGeneral Subject general
	FieldSubjectGeneral *int `csv:"field_subject_general" json:"field_subject_general,omitempty"`

	// FieldSubjectHierarchicalGeo Subject hierarchical geo
	FieldSubjectHierarchicalGeo *string `csv:"field_subject_hierarchical_geo" json:"field_subject_hierarchical_geo,omitempty"`

	// FieldSubjectLcsh LCSH subject
	FieldSubjectLcsh *int `csv:"field_subject_lcsh" json:"field_subject_lcsh,omitempty"`

	// FieldSubjectsName Subjects name
	FieldSubjectsName *int `csv:"field_subjects_name" json:"field_subjects_name,omitempty"`

	// FieldTableOfContents Table of contents
	FieldTableOfContents *string `csv:"field_table_of_contents" json:"field_table_of_contents,omitempty"`

	// FieldTemporalSubject Temporal subject
	FieldTemporalSubject *int `csv:"field_temporal_subject" json:"field_temporal_subject,omitempty"`

	// FieldThumbnail Thumbnail
	FieldThumbnail *int `csv:"field_thumbnail" json:"field_thumbnail,omitempty"`

	// FieldTitlePartName Title part name
	FieldTitlePartName *string `csv:"field_title_part_name" json:"field_title_part_name,omitempty"`

	// FieldViewerOverride Viewer override
	FieldViewerOverride *int `csv:"field_viewer_override" json:"field_viewer_override,omitempty"`

	// FieldWeight Weight
	FieldWeight *int `csv:"field_weight" json:"field_weight,omitempty"`

	// Lang Language code
	Lang *string `csv:"langcode" json:"lang,omitempty"`

	// Nid Node ID
	Nid *int `csv:"node_id" json:"nid,omitempty"`

	// RevisionLog Revision log
	RevisionLog *string `csv:"-" json:"revision_log,omitempty"`

	// RevisionTimestamp Revision timestamp
	RevisionTimestamp *string `csv:"-" json:"revision_timestamp,omitempty"`

	// RevisionUid Revision UID
	RevisionUid *int `csv:"-" json:"revision_uid,omitempty"`

	// Status Status (published)
	Status *bool `csv:"published" json:"status,omitempty"`

	// Title Title
	Title string `csv:"title" json:"title"`

	// Type Type
	Type *string `csv:"-" json:"type,omitempty"`

	// Uid UID
	Uid *int `csv:"-" json:"uid,omitempty"`

	// Uuid UUID
	Uuid *string `csv:"-" json:"uuid,omitempty"`

	// Vid Version ID
	Vid *int `csv:"-" json:"vid,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload CSV file
	// (POST /upload)
	PostUpload(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostUpload operation middleware
func (siw *ServerInterfaceWrapper) PostUpload(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/upload", wrapper.PostUpload)

	return m
}
